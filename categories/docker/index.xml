<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 月盾的个人博客</title>
    <link>/categories/docker/</link>
    <description>Recent content in docker on 月盾的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 26 Jan 2018 04:35:58 +0000</lastBuildDate><atom:link href="/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>再聊docker和nodejs</title>
      <link>/blogdetail/5a6ab02e260a5391e91a525f/</link>
      <pubDate>Fri, 26 Jan 2018 04:35:58 +0000</pubDate>
      
      <guid>/blogdetail/5a6ab02e260a5391e91a525f/</guid>
      <description>上一篇写到了如何在docker中运行nodejs，运行方式是在docker中安装了pm2来保证node服务宕机重启，这种方式更像是把docker当做虚拟机来使用。其实，既然使用了docker的话就可以不使用pm2来管理进程，因为docker自身可以充当守护进程，在node进程退出时进行重启。只要在启动docker容器时加上&amp;ndash;restart=always参数即可。例如：docker run -d --restart=always -p 3000:3000 mynode:1
没有pm2如何开启多进程 使用pm2可以开启多node进程，并且自带负载均衡，但是有个限制，pm2可以开启的进程数是CPU最大核心数。而使用docker的话就不会受限于此了，开启几十个上百个node服务都可以，然后通过nginx实现负载均衡。不过要手动开启几十上百个docker容器那怎么行？让我手动开启3个都很烦了，这时候就需要用到docker编排工具了，比如：Docker Swarm、Kubernetes、docker compose等，可以一键开启多个容器。但是使用编排工具启动docker端口就不确定了，是由编排工具随机开启服务端口的，这又要做到服务注册发现，所以这些工具结合起来使用。
哪一种部署方式支持并发高？ 使用jmeter在本机上进行了简单的并发测试，服务端进行简单的10万次hash计算，使用pm2开启4个实例，docker开启5个实例。docker使用Nginx做负载均衡，单次访问响应时间在1.2s~1.4s之间不等，在200个并发的情况下，两种模式响应时间相差不大，docker模式响应时间略占优势，大概快了0.1s。当并发数在300以上时两者的响应时间都有增加，此时docker部署方式出现了响应失败的情况，pm2就比较稳定了，虽然响应时间增加，但是并未出现过响应失败。 所以在单机上低并发docker还是有点优势，如果在高并发情况下还是pm2更稳定一些。（以上测试是单机上进行，准确性并不高）</description>
    </item>
    
    <item>
      <title>在docker中运行nodejs</title>
      <link>/blogdetail/5a6021fa4bdc8ea471fd2db0/</link>
      <pubDate>Thu, 18 Jan 2018 04:26:34 +0000</pubDate>
      
      <guid>/blogdetail/5a6021fa4bdc8ea471fd2db0/</guid>
      <description>首先看项目目录： 再看Dockerfile文件内容：
# 以最新的node为基础镜像 FROM hub.c.163.com/library/node:latest # 工作目录为app WORKDIR /app # 拷贝当前所在项目根目录到app目录 COPY . /app # 全局安装pm2 RUN npm install pm2 -g EXPOSE 8081 #使用pm2启动nodejs，如果没有--no-daemon参数docker启动后就退出 CMD [&amp;quot;pm2-runtime&amp;quot;, &amp;quot;dest/server.js&amp;quot;, &amp;quot;--no-daemon&amp;quot;] # ENTRYPOINT [&amp;quot;node&amp;quot;, &amp;quot;server.js&amp;quot;] 或者在Dockerfile中不添加CMD命令，可以在启动docker时执行命令： docker run --name ks -ti -p 8081:8081 kser:pm2 pm2-runtime dest/server.js
如果是后台运行的docker， docker run --name ks -d -p 8081:8081 kser:pm2 pm2-runtime dest/server.js -d选项是后台运行
需要进入到docker查看pm2运行情况 ，可以通过docker exec -ti ks /bin/sh查看运行的容器内部情况 </description>
    </item>
    
    <item>
      <title>Dockerfile CMD命令没有执行npm start</title>
      <link>/blogdetail/5a1be456da5c711b612f4d39/</link>
      <pubDate>Mon, 27 Nov 2017 10:09:26 +0000</pubDate>
      
      <guid>/blogdetail/5a1be456da5c711b612f4d39/</guid>
      <description>Dockerfile
FROM hub.c.163.com/public/nodejs:6.11.0 WORKDIR /app COPY . /app RUN npm install EXPOSE 3000 # CMD [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;] ENTRYPOINT [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;]  docker ps:
 CONTAINER ID IMAGE COMMAND 59988bd90894 myfd &amp;quot;/bin/sh -c &#39;/usr/...&amp;quot; 在Dockerfile中配置了CMD [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;],docker ps后显示COMMAND为&amp;quot;/bin/sh -c &#39;/usr/...&amp;quot; 改为ENTRYPOINT [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;]就可以了</description>
    </item>
    
  </channel>
</rss>
