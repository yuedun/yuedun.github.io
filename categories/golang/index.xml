<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 月盾的博客</title>
    <link>https://www.yuedun.wang/categories/golang/</link>
    <description>Recent content in golang on 月盾的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 28 Sep 2022 14:00:43 +0800</lastBuildDate><atom:link href="https://www.yuedun.wang/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elasticsearch批量insert和批量upsert</title>
      <link>https://www.yuedun.wang/2022/09/elasticsearch-bulk-upsert/</link>
      <pubDate>Wed, 28 Sep 2022 14:00:43 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2022/09/elasticsearch-bulk-upsert/</guid>
      <description>golang版本的elasticsearch批量插入和批量更新方法如下：
package main import ( &amp;#34;github.com/elastic/go-elasticsearch/v8&amp;#34; &amp;#34;github.com/elastic/go-elasticsearch/v8/esutil&amp;#34; ) func main() { list:=make(User, 0) bulkES(list) } func bulkES(list []User) error { indexer, err := esutil.NewBulkIndexer(esutil.BulkIndexerConfig{ Index: &amp;#34;search-user&amp;#34;, Client: ES, }) if err != nil { return err } for _, v := range list { data, err := json.Marshal(v) if err != nil { return err } err = indexer.Add( context.Background(), esutil.BulkIndexerItem{ Action: &amp;#34;index&amp;#34;, Body: bytes.NewReader(data), }, ) if err != nil { return err } } indexer.</description>
    </item>
    
    <item>
      <title>go http响应乱码</title>
      <link>https://www.yuedun.wang/2022/05/http-response-garbled/</link>
      <pubDate>Thu, 12 May 2022 21:46:13 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2022/05/http-response-garbled/</guid>
      <description>golang请求接口返回的数据乱码，原因之一是请求头设置了&amp;quot;Accept-Encoding&amp;quot;: &amp;quot;gzip, deflate, br&amp;quot;，那么如果服务器支持的话响应的数据就会经过gzip，deflate，br等方式的压缩，解决方式是对数据解压，或者可以不设置接收方式，即&amp;quot;Accept-Encoding&amp;quot;: &amp;quot;&amp;quot;
import &amp;#34;github.com/andybalholm/brotli&amp;#34; import &amp;#34;compress/flate&amp;#34; import &amp;#34;compress/gzip&amp;#34; // 检测返回的body是否经过压缩，并返回解压的内容 func contentDecoding(res *http.Response) (bodyReader io.Reader, err error) { switch res.Header.Get(&amp;#34;Content-Encoding&amp;#34;) { case &amp;#34;gzip&amp;#34;: bodyReader, err = gzip.NewReader(res.Body) case &amp;#34;deflate&amp;#34;: bodyReader = flate.NewReader(res.Body) case &amp;#34;br&amp;#34;: bodyReader = brotli.NewReader(res.Body) default: bodyReader = res.Body } return } </description>
    </item>
    
  </channel>
</rss>
