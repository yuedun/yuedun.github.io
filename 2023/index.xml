<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023s on 月盾的博客</title>
    <link>https://www.yuedun.wang/2023/</link>
    <description>Recent content in 2023s on 月盾的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 17 May 2023 19:38:34 +0800</lastBuildDate><atom:link href="https://www.yuedun.wang/2023/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>next/image组件导致服务器504超时</title>
      <link>https://www.yuedun.wang/2023/05/next-image-timeout/</link>
      <pubDate>Wed, 17 May 2023 19:38:34 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/05/next-image-timeout/</guid>
      <description>谁能想到，一个前端组件也能把服务搞崩溃。这个组件正是next/image，原本是想利用next/image来优化图片，next.js官方也一直推荐这么做。
突然有一天用户反馈网站出现504超时报错，当时优先重启恢复服务。然后把日志打开观察，果不其然，几分钟后就又出现504超时，伴随出现的日志则是：
upstream image response failed for https://example.com/280d59d8-f3b0-11ed-a295-00163e253f9a_00002_VvBbv3zj.jpg?OSSAccessKeyId=LTAI5nodLHeacT1J5SmWh&amp;amp;Expires=317044217325&amp;amp;Signature=Wf5jYWf7vnXOyRoKLVtiTCrt8%3D 404 初步判断是图片404导致服务器超时，深入猜测是使用next.js服务端渲染请求了图片资源，而图片资源不存在导致服务器渲染出错。
但是很不合理，服务端只是把图片资源的地址渲染到html中，并不会在服务端请求图片资源才对，为什么服务器日志会出现上述错误信息呢？于是观察浏览器中图片的请求，发现格式是这样的： http://example.com/_next/image?url=https%3A%2F%2Fexample.com%2Ff6c912da-f0cc0000_0d7GBaLE.jpg%3FOSSAccessKeyId%3DmWh%26Expires%3D317043899846%26Signature%3DYUMro%253D&amp;amp;w=384&amp;amp;q=75
浏览器请求的图片资源并不是图片的真实地址，而是经过了next.js服务处理的，尤其是URL最后两个参数，是图片压缩参数。如果你发现图片变模糊了，也可能是这两个参数捣的鬼。直接拿着这个地址去浏览器请求发现响应很慢，这时再次得出结论：这个图片组件有问题。为了验证把所有使用了next/image组件全部使用原生img标签，发布到线上后就再没出现504超时。
总结：next/image组件包装后的图片资源需要经过node层压缩处理，会消耗CPU资源，对于大量的图片资源会有风险，酌情处理。 本次出现的时候伴随着图片资源404，可能是有bug存在，如果加载不到正确的图片就会触发bug。 另一种解决方案：根据官方文档说明，如果使用next/image,需要添加sharp包来提高性能，但是可能需要注意内存消耗问题。</description>
    </item>
    
    <item>
      <title>next.js项目使用pm2 reload出现502</title>
      <link>https://www.yuedun.wang/2023/05/pm2-reload-nextjs-502/</link>
      <pubDate>Mon, 15 May 2023 19:09:41 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/05/pm2-reload-nextjs-502/</guid>
      <description>为了使next.js项目能够不宕机，使用了pm2守护进程，既能保证node出现异常情况能够自动重启，也能保证服务器整机重启时自动恢复服务。多年使用下来的确能够良好运行，不过最近却出现了与原本期望不符的情况。
在已经启动next.js项目的情况下，如果需要重启，我使用了pm2 reload appname，实际上没有完美的零停机重启，反而是直接出现服务不可用，访问网站就502，并且一直无法恢复。在查阅pm2 issue后发现确实有这样的bug。
无奈，只能使用pm2 restart来重启应用。</description>
    </item>
    
    <item>
      <title>jenkins代替品</title>
      <link>https://www.yuedun.wang/2023/05/ci-cd/</link>
      <pubDate>Wed, 10 May 2023 18:55:23 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/05/ci-cd/</guid>
      <description>如果你打算搭建一套发布系统，你可能会考虑jenkins，或者其他。 我要介绍的则是一些现成的，使用更简单的工具。没用特殊环境要求的情况下则完全可以代替jenkins。
GitHub Actions 阿里云流水线 coding持续部署 上面只是列举了三类，实际上你会发现市面上的云服务商和代码仓库都提供了类似的工具，虽然有些是收费的，但是也有不少免费的，对于个人来说其实大多数都是够用了。</description>
    </item>
    
    <item>
      <title>Centos Appstream Error</title>
      <link>https://www.yuedun.wang/2023/04/centos-appstream-error/</link>
      <pubDate>Sat, 22 Apr 2023 16:36:21 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/04/centos-appstream-error/</guid>
      <description>[root@hecs-221218 network-scripts]# yum install rsync CentOS-8 - AppStream 3.4 kB/s | 394 B 00:00 Errors during downloading metadata for repository &amp;#39;AppStream&amp;#39;: - Status code: 404 for https://repo.huaweicloud.com/centos/8/AppStream/x86_64/os/repodata/repomd.xml (IP: 61.172.228.200) Error: Failed to download metadata for repo &amp;#39;AppStream&amp;#39;: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried 解决办法：
修改/etc/yum.repos.d/CentOS-AppStream.repo中的baseurl为 baseurl=https://mirrors.aliyun.com/centos/8-stream/AppStream/x86_64/os/</description>
    </item>
    
    <item>
      <title>2010年的笔记本升级硬件，再战10年</title>
      <link>https://www.yuedun.wang/2023/02/acer-4741g-upgrade/</link>
      <pubDate>Tue, 31 Jan 2023 10:58:35 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/02/acer-4741g-upgrade/</guid>
      <description>上个月把thinkpad升级了固态硬盘后，彷佛打开了新世界的大门。想起了我2010年买的宏基4741g还在压箱底，何不也来次大换血？ 问：这都2023年了，高性能的笔记本一抓一大把，14年前的电脑早该化成灰了，还有必要使用吗？ 我想要升级老电脑的原因主要有两点：
就是玩，本人就是一个电子爱好者，平时就是喜欢把家电修修补补。 对于只是日常办公够用就行，不太追求极致的性能体验。 宏基4741g属于2010年的产品，当时买来是用于学习计算机使用的，一直用到2016年，期间也有过多次维修经历。因为散热差，经常因为工作开太多程序导致意外关机，所以购买了Thinkpad T450，从此让我有了最差的电脑使用体验。好在后来大多数时间都是使用公司提供的电脑，Thinkpad就放家里看看电影，写代码根本不想打开它，开机6分钟，命令行提示卡十几秒。我是用了6年的4741g都没让我受过这气。
所以，基本可以确定，10年宏基4741g在性能上比16年Thinkpad T450好不少，如果升级一下硬盘和内存，使用体验肯定不会差。
然后就是35元买了120G固态硬盘，35元的4G内存，10元买了硬盘盒。原来是32位win7系统，现在重装了64位win7，这样一升级性能至少翻倍，再用10年没毛病吧。</description>
    </item>
    
    <item>
      <title>Thinkpad T450加装固态硬盘记录</title>
      <link>https://www.yuedun.wang/2023/01/thinkpadjiagutaiyingpan/</link>
      <pubDate>Tue, 31 Jan 2023 10:58:35 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/01/thinkpadjiagutaiyingpan/</guid>
      <description>2016年初花大价钱买的thinkpad t450准备用来工作，结果发现性能太差，根本满不了需求。于是就放家里日常使用，即使这样还是无法忍受它的慢，慢到什么程度呢？开机到桌面3分钟，再到打开程序3分钟。这还不如我2010年买的2G内存i3电脑性能好。后来把内存从4G加到8G没有明显提升，那就剩下CPU和机械硬盘的问题了，CPU是低压版i5 4300U，和主板焊在一起，没法升级。前几年就想升级硬盘，但是那时候固态硬盘价格不便宜，也没有着急升级。直到最近才忍受不了，下定决心升级一下。
升级过程并不顺利……
首先是确定支持的接口，thinkpad t450已经装了一块16G固态硬盘，接口是M.2（即NGFF，现在已经改名为M.2了）
真实尺寸很小，22*42mm大小，就是2240型号。2280型号意思就是宽22长80，自然就是更大尺寸的。选择的时候要注意不要选错。
安装好以后使用傲梅分区助手进行系统迁移（之后遇到很多问题），然后在bios里修改启动顺序，结果左上角的光标一直闪，无法进入系统，修改为原HDD硬盘后还是可以启动的。网上有说法是磁盘盘符冲突，按照方法在注册表中调换盘符后还是进入不了系统，甚至原来的磁盘系统也进入不了。
无奈，只能重装系统。但是不能在原来的盘里装，需要直接装套SSD固态硬盘上。准备了8G U盘，4G肯定是不够的，win10系统就有4.5G以上了。下载winpe，直接安装到U盘里，然后将下载好的win10系统拷贝到winpe工具箱里。
再修改启动顺序重启系统，这时候也出现问题，识别不到U盘，我是在系统启动后再插上U盘，如果直接插上再启动就会识别不出来。进入到pe系统后首先通过系统安装器安装系统，又出现找不到iso系统文件的情况，重插U盘解决。但是选择目标盘后MBR始终是黄色，无法变成绿色，最后通过CGI工具还原的方式成功安装。
安装成功重启又出现boot menu界面，死活进入不了系统，这个是由于在bios中修改过启动方式引起的。有uefi和legacy两种模式，设置为both兼容模式启动。至此算是安装成功。
由于加了SSD固态硬盘，原来的盘符也有变化，SSD成了C盘，原来的C盘变成了D盘，以此类推。手动把原盘中的快捷方式拷贝过新盘，都用不了，可以通过属性-修改路径的方式修正。个别软件缺少dll动态链接库也可以从原盘找到，有两个目录可以查找windows-System32,windows-Syswow64。
总结：系统启动时间由3分钟提升到了30秒，到桌面也可以直接操作，不需要再等3分钟才能做操作。</description>
    </item>
    
    <item>
      <title>Ld Warning Object File Was Built for Newer MacOS Version Than Being Linked</title>
      <link>https://www.yuedun.wang/2023/01/ld-warning-object-file-was-built-for-newer-macos-version-than-being-linked/</link>
      <pubDate>Tue, 03 Jan 2023 10:46:35 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/01/ld-warning-object-file-was-built-for-newer-macos-version-than-being-linked/</guid>
      <description>go run和go build会报出一连串下面这样的警告信息，虽然不影响程序运行，但是看着难看。
# command-line-arguments ld: warning: object file (/var/folders/9p/2x3ls9kn7qb59hf9l9mtfs8s6rbmfg/T/go-link-3994413096/000000.o) was built for newer macOS version (12.0) than being linked (11.0) 解决方法：CGO_CFLAGS=-mmacosx-version-min=10.12 go run main.go，运行前加CGO_CFLAGS=-mmacosx-version-min=10.12参数可以解决。</description>
    </item>
    
  </channel>
</rss>
