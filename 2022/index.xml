<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2022s on 月盾的博客</title>
    <link>https://www.yuedun.wang/2022/</link>
    <description>Recent content in 2022s on 月盾的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 31 Dec 2022 11:02:40 +0800</lastBuildDate><atom:link href="https://www.yuedun.wang/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sveltekit1.0后的使用感受</title>
      <link>https://www.yuedun.wang/2022/12/sveltekit/</link>
      <pubDate>Sat, 31 Dec 2022 11:02:40 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2022/12/sveltekit/</guid>
      <description>之前提到过关于svelte框架——sapper和sveltekit的发展，已经是1年前的事了，其中提到过svelte的框架sapper和sveltekit，sapper已经明确不再更新了，官方推荐的是sveltekit。然后经过两年的迭代更新，于2022年12月终于推出了1.0版本。可以看看官方博客对1.0的介绍Announcing SvelteKit 1.0。
然后谈谈个人感受。
优点： sveltekit集成的还不错，开发体验可以，使用官方提供的脚手架创建的项目就可以直接使用，不需要做任何配置。热更新，响应速度快，支持typescript等等，该有的都有了。
缺点： 又是一个全新轮子，这也是整个前端的通病，除了js是通用的，其他的都能给你整出花来，sveltekit在1.0版本之内已经有破坏性的更新，一年前创建的新项目，一年后基本不能用了。
至于要不要使用，那就看个人情况了，如果你厌烦了其他框架，倒是可以尝尝鲜，如果你想以此来做长期项目的话，个人就不推荐了，毕竟太新，而且向下兼容又做的不好，隔三差五一个破坏性更新，这种折腾劲恐怕没几个人受得了。而且对自己的技术也不能积累，长此以往并没有好处。</description>
    </item>
    
    <item>
      <title>Elasticsearch批量insert和批量upsert</title>
      <link>https://www.yuedun.wang/2022/09/elasticsearch-bulk-upsert/</link>
      <pubDate>Wed, 28 Sep 2022 14:00:43 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2022/09/elasticsearch-bulk-upsert/</guid>
      <description>golang版本的elasticsearch批量插入和批量更新方法如下：
package main import ( &amp;#34;github.com/elastic/go-elasticsearch/v8&amp;#34; &amp;#34;github.com/elastic/go-elasticsearch/v8/esutil&amp;#34; ) func main() { list:=make(User, 0) bulkES(list) } func bulkES(list []User) error { indexer, err := esutil.NewBulkIndexer(esutil.BulkIndexerConfig{ Index: &amp;#34;search-user&amp;#34;, Client: ES, }) if err != nil { return err } for _, v := range list { data, err := json.Marshal(v) if err != nil { return err } err = indexer.Add( context.Background(), esutil.BulkIndexerItem{ Action: &amp;#34;index&amp;#34;, Body: bytes.NewReader(data), }, ) if err != nil { return err } } indexer.</description>
    </item>
    
    <item>
      <title>go http响应乱码</title>
      <link>https://www.yuedun.wang/2022/05/http-response-garbled/</link>
      <pubDate>Thu, 12 May 2022 21:46:13 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2022/05/http-response-garbled/</guid>
      <description>golang请求接口返回的数据乱码，原因之一是请求头设置了&amp;quot;Accept-Encoding&amp;quot;: &amp;quot;gzip, deflate, br&amp;quot;，那么如果服务器支持的话响应的数据就会经过gzip，deflate，br等方式的压缩，解决方式是对数据解压，或者可以不设置接收方式，即&amp;quot;Accept-Encoding&amp;quot;: &amp;quot;&amp;quot;
import &amp;#34;github.com/andybalholm/brotli&amp;#34; import &amp;#34;compress/flate&amp;#34; import &amp;#34;compress/gzip&amp;#34; // 检测返回的body是否经过压缩，并返回解压的内容 func contentDecoding(res *http.Response) (bodyReader io.Reader, err error) { switch res.Header.Get(&amp;#34;Content-Encoding&amp;#34;) { case &amp;#34;gzip&amp;#34;: bodyReader, err = gzip.NewReader(res.Body) case &amp;#34;deflate&amp;#34;: bodyReader = flate.NewReader(res.Body) case &amp;#34;br&amp;#34;: bodyReader = brotli.NewReader(res.Body) default: bodyReader = res.Body } return } </description>
    </item>
    
    <item>
      <title>chrome开发者工具显示接口完整路径</title>
      <link>https://www.yuedun.wang/2022/02/chrome-devtool-show-all-path/</link>
      <pubDate>Fri, 18 Feb 2022 16:23:26 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2022/02/chrome-devtool-show-all-path/</guid>
      <description>chrome浏览器的开发者工具是前端开发必不可少的工具，其中接口查看是最常用的功能之一。默认情况下显示如下： 主要是红框内的接口显示只有很短的名称，并没有完整的显示出整个接口，这对于一些最后名称一样的接口就不能知晓是哪个接口了，只能点击查看详情。我们希望的当然是能够显示完整的接口，实际上也是能做到的。
在名称栏上右击：
可以显示很多选项，其中路径和网址就是我们先要的，点击以后就可以显示完整的接口路径了。</description>
    </item>
    
  </channel>
</rss>
