<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文件 on 月盾的博客</title>
    <link>https://www.yuedun.wang/tags/%E6%96%87%E4%BB%B6/</link>
    <description>Recent content in 文件 on 月盾的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 28 Nov 2017 15:31:19 +0000</lastBuildDate><atom:link href="https://www.yuedun.wang/tags/%E6%96%87%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读写数据库与读写文件哪个更快？</title>
      <link>https://www.yuedun.wang/blogdetail/5a1d8147da5c711b612f4d88/</link>
      <pubDate>Tue, 28 Nov 2017 15:31:19 +0000</pubDate>
      
      <guid>https://www.yuedun.wang/blogdetail/5a1d8147da5c711b612f4d88/</guid>
      <description>由于开发物流信息网，关于这个问题也是最近才想到的，就是到底读文件更快还是读数据库更快，能快多少，书生也搜索过，没见有网友就这个问题答复过， 也可能是太简单的缘故，我们本文还是来实测一下，由于时间关系，VC还没装，书生先用PHP测试了一下，下次有时间在C/C++上补充测试到本文来，因为 PHP的底层解析应该也是基于C的，所以估计两者环境测试结果差不多，小问题大收获，现在就来看一下测试过程及结果。
测试程序如下： //说明1：由于读数据库语句调用简单的封包函数两次，所以把读文件也改成连续调用两次，数据库记录ID为1就在第一条，并且唯一索引。
//说明2：测试两次一次是4K数据，一次是整形数据
set_time_limit(0); function fnGet($filename) { $content = file_get_contents($filename); return $content; } function fnGetContent($filename) { $content = fnGet($filename); return $content; } $times=100000; echo &amp;#39;数据库查询结果：&amp;lt;br/&amp;gt;&amp;#39;; //--------------------------------- $begin=fnGetMicroTime(); for($i=0;$i&amp;lt;$times;$i++) { $res=$dbcon-&amp;gt;mydb_query(&amp;#34;SELECT log_Content FROM blog WHERE log_ID=&amp;#39;1&amp;#39;&amp;#34;); $row=$dbcon-&amp;gt;mydb_fetch_row($res); $content=$row[0]; } echo &amp;#39;fetch_row &amp;#39;.$times.&amp;#39; 次时间：&amp;lt;font color=red&amp;gt;&amp;#39;.(fnGetMicroTime()-$begin).&amp;#39;&amp;lt;/font&amp;gt;秒&amp;lt;br/&amp;gt;&amp;#39;; //---------------------------------  $begin=fnGetMicroTime(); for($i=0;$i&amp;lt;$times;$i++) { $res=$dbcon-&amp;gt;mydb_query(&amp;#34;SELECT log_Content FROM blog WHERE log_ID=&amp;#39;1&amp;#39;&amp;#34;); $row=$dbcon-&amp;gt;mydb_fetch_array($res); $content=$row[&amp;#39;log_Content&amp;#39;]; } echo &amp;#39;fetch_array &amp;#39;.$times.&amp;#39; 次时间：&amp;lt;font color=red&amp;gt;&amp;#39;.(fnGetMicroTime()-$begin).&amp;#39;&amp;lt;/font&amp;gt;秒&amp;lt;br/&amp;gt;&amp;#39;; //---------------------------------  $begin=fnGetMicroTime(); for($i=0;$i&amp;lt;$times;$i++) { $res=$dbcon-&amp;gt;mydb_query(&amp;#34;SELECT log_Content FROM blog WHERE log_ID=&amp;#39;1&amp;#39;&amp;#34;); $row=$dbcon-&amp;gt;mydb_fetch_object($res); $content=$row-&amp;gt;log_Content; } echo &amp;#39;fetch_object &amp;#39;.</description>
    </item>
    
    <item>
      <title>nodejs请求网络资源写到本地</title>
      <link>https://www.yuedun.wang/blogdetail/57c7f2301165e2677d137d65/</link>
      <pubDate>Thu, 01 Sep 2016 09:17:36 +0000</pubDate>
      
      <guid>https://www.yuedun.wang/blogdetail/57c7f2301165e2677d137d65/</guid>
      <description>nodejs请求网络资源写到本地 有这样一个需求：抓取网络上的图片或其他类型文件保存的本地，根据以往的经验这样写：
var request=require(&amp;#34;request&amp;#34;); var fs=require(&amp;#34;fs&amp;#34;); var url=&amp;#34;http://h.hiphotos.baidu.com/zhidao/pic/item/6d81800a19d8bc3ed69473cb848ba61ea8d34516.jpg&amp;#34;; HttpRequest.get(url, (err, res, body) =&amp;gt; { res.setEncoding(&amp;#34;binary&amp;#34;);//二进制（binary）  FS.writeFile(&amp;#34;out.png&amp;#34;, body, &amp;#34;binary&amp;#34;, function (err) {//以二进制格式保存  if (err) throw err; console.log(&amp;#34;file saved&amp;#34;); }); }); 这个例子可能看起来比较眼熟，其实我就是从网上找来的，如果用这种方法成功的话那么恭喜你了，反正我是没有成功。还有一种情况是虽然成功的写文件到本地了，但是打不开，反正提示就是文件损坏之类的。总之，就是上面的方法行……不……通……
还好，有另一种方法可行，而且看起来代码量也少了很多。
var url=&amp;#34;http://h.hiphotos.baidu.com/zhidao/pic/item/6d81800a19d8bc3ed69473cb848ba61ea8d34516.jpg&amp;#34;; request(url).pipe(fs.createWriteStream(&amp;#34;out.png&amp;#34;)); 不过，虽然代码少了很多，但是疑问多了很多，pipe函数是什么东西，还有fs.createWriteStream()函数，借助nodejs帮助文档大概解释一二。
_pipe_函数把他称作为管道吧，回头看一下代码，就是把前面请求的内容通过管道输送到后面的容器里面。虽然这么说还是不太理解，为什么可以调用pipe管道？
非郑重声明：本人也是用蹩脚的英语大概理解nodejs stream的相关知识，如果有不妥的地方误导了人只能表示抱歉
有关网络请求，比如http request，和文件操作方面的都涉及到流的概念，流是可读可写的，
const http = require(&amp;#34;http&amp;#34;); var server = http.createServer( (req, res) =&amp;gt; { } 其中req是可读Readable Stream的流，res是可写Writable Stream的流，再看request(url).pipe(fs.createWriteStream(&amp;quot;out.png&amp;quot;));,
request是继承自stream模块的，所以它也是具有可读可写的特性，自然就能调用pipe函数，从而获取到数据，然后需要写入到一个文件中，就需要由pipe输出到一个可写的流中，fs.createWriteStream(path)返回一个可写WriteStream的流，就可以接受pipe管道的输出，最后写入到本地文件。</description>
    </item>
    
  </channel>
</rss>
