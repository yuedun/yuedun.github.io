<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mongodb on 月盾的个人博客</title>
    <link>/tags/mongodb/</link>
    <description>Recent content in mongodb on 月盾的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Apr 2020 15:14:10 +0000</lastBuildDate><atom:link href="/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang操作mongodb</title>
      <link>/blogdetail/5e8b4742bd7e796e71009fcc/</link>
      <pubDate>Mon, 06 Apr 2020 15:14:10 +0000</pubDate>
      
      <guid>/blogdetail/5e8b4742bd7e796e71009fcc/</guid>
      <description>在之前mgo是一个使用广泛的mongodb驱动器，不过从2018年开始已不再维护，虽然觉得怪可惜的，但也不推荐使用了，毕竟mongodb本身一直在迭代，如果驱动器不更新后续也没法使用。 详细说明见仓库:https://github.com/go-mgo/mgo
而mongodb提供了官方驱动，目前能找到的中文文档大多比较旧了，推荐直接看官方文档，有完整的操作手册:https://www.mongodb.com/blog/search/golang 本文也不想做一次搬运工，毕竟也不能随时保持更新，还是直接看官方文档比较好。下面列出一些主要的文章链接:
Stack Overflow Research of 100,000 Developers Finds MongoDB is the Most Wanted Database (2019-2-2)
Official MongoDB Go Driver Now Available for Beta Testing (2019-2-2) mongodb将为go提供官方驱动支持
MongoDB Go Driver Tutorial (2019-5-30) MongoDB Go驱动程序教程
Go Migration Guide (2019-2-2) 从社区驱动（mgo）迁移到官方驱动
MongoDB Stitch Functions – The AWS re:Invent Stitch Rover Demo(2019-10-15)
Calling the MongoDB Atlas API - How to do it from Go(2019-3-18)
MongoDB Go Driver Tutorial Part 1: Connecting, Using BSON, and CRUD Operations(2019-4-23)</description>
    </item>
    
    <item>
      <title>mongodb forEach替换文本</title>
      <link>/blogdetail/5bb08746f846d21847dc2aef/</link>
      <pubDate>Sun, 30 Sep 2018 08:20:22 +0000</pubDate>
      
      <guid>/blogdetail/5bb08746f846d21847dc2aef/</guid>
      <description>最近七牛云存储要收回测试域名，但是我的博客中图片使用了这些测试域名，所以要替换掉，避免图片不可访问。在文档中没有找到可以直接替换的方法，所以就使用了mongodb的forEach循环替换。 首先用正则查询法查出使用了测试域名的文档，然后forEach循环，在每个循环中使用js的正则替换函数将域名替换掉，最后再保存该文档即可。
db.getCollection(&#39;blogs&#39;).find({content:{$regex:/hopefully.qiniudn.com/}}).forEach(function(item){item.content = item.content.replace(/hopefully.qiniudn.com/g, &#39;hopefully-img.yuedun.wang&#39;)db.getCollection(&#39;blogs&#39;).save(item)print(&amp;quot;&amp;gt;&amp;gt;&amp;quot;, item.content);})</description>
    </item>
    
    <item>
      <title>新阿里云服务器一些基本设置</title>
      <link>/blogdetail/5b21fc996699964267f5e168/</link>
      <pubDate>Thu, 14 Jun 2018 05:26:49 +0000</pubDate>
      
      <guid>/blogdetail/5b21fc996699964267f5e168/</guid>
      <description>修改terminal apt-get update更新软件源，安装zsh，设置默认terminal为zsh，chsh -s /usr/bin/zsh。非root用户需要在root权限下修改/etc/passwd文件才能实现。
安装git
 apt-get install git
 nginx设置：
 sudo /etc/init.d/nginx restart # or start, stop
 或
 sudo service nginx restart # or start, stop
 有时候我们改了配置文件只是要让配置生效，这个时候不必重启，只要重新加载配置文件即可。sudo nginx -s reload
目录/etc/nginx/sites-available/下增加文件配置反向代理，并软链接到/etc/nginx/sites-enabled/下
mongodb导入数据 启动：
 /usr/local/mongodb/bin/mongod &amp;ndash;dbpath=/usr/local/mongodb/data &amp;ndash;logpath=/usr/local/mongodb/logs &amp;ndash;logappend &amp;ndash;auth &amp;ndash;fork
 如需外网客户端连接加参数--bind_ip_all
导入单个collection
 ./mongorestore -v -h ip -u xxxx -p xxxx &amp;ndash;db=blogs -c blogs /home/yuedun/download/xxxx.bson/xxxx/blogs.bson
 或导入整个目录
 ./mongorestore -v -h ip -u xxxx -p xxxx &amp;ndash;db=blogs &amp;ndash;drop /home/yuedun/download/xxxx.</description>
    </item>
    
    <item>
      <title>mongoose自动添加createdAt和updatedAt</title>
      <link>/blogdetail/593b6b37b787b03177cfff16/</link>
      <pubDate>Sat, 10 Jun 2017 04:44:55 +0000</pubDate>
      
      <guid>/blogdetail/593b6b37b787b03177cfff16/</guid>
      <description>export var CommentSchema: Schema = new Schema({ Id: String, content: String, status: { type: Boolean, default: true } }, { timestamps: true}); 添加{ timestamps: true}选项即可，如果需要自定义属性名称可以直接指定： { timestamps: {createdAt:&#39;created_at&#39;, updatedAt:&#39;updated_at&#39;}}</description>
    </item>
    
    <item>
      <title>Mongodb和mongoose模糊查询</title>
      <link>/blogdetail/581d736c43c18f1b7ae3e3ff/</link>
      <pubDate>Sat, 05 Nov 2016 05:51:40 +0000</pubDate>
      
      <guid>/blogdetail/581d736c43c18f1b7ae3e3ff/</guid>
      <description>需求说明：在mongdb中使用模糊查询，就像sql中的like查询，在where条件中使用模糊匹配，当然最重要的是需要模糊查询的字符串是动态传入的
 以一篇文章为例，content字段为文章内容，我们要查询文章内容中包含Nodejs关键字的文章
mongodb中查询
select * from articles where content like &#39;%Nodejs%&#39;;db.articles.find( { content: /Nodejs/i } )Article.find({ content: /Nodejs/i}, function (err, docs) {});这种写法是一种简写操作，需要注意的是不能带双引号，带了双引号就成了字符串。但是这种写法是用/包裹了一个字符串类型的关键字，在实际程序是动态传入的，比如：
var a=&amp;quot;Nodejs&amp;quot; ;Article.find({ content: /a/i}, function (err, docs) {});此时会把&amp;quot;a&amp;quot;当做要查询的关键字而不是&amp;quot;Nodejs&amp;quot;，所以这时还是需要用到完整的查询方式，就是使用$regex关键字，还有$options选项
var text = &#39;Nodejs&#39;;//动态传入的变量Article.find({ content: { $regex: text, $options: &#39;i&#39; }}, function (err, docs) {});$options选项值：
 i 大小写不敏感 m $regex包含正则^,$符号的表达式 x 忽略空格 s 允许逗点匹配所有字符串  其实$regex就是正则表达式的写法
查找数组中的字段：
contacts:{[{address: &amp;quot;address1&amp;quot;,name: &amp;quot;张三&amp;quot;},{address: &amp;quot;address2&amp;quot;,name: &amp;quot;李四&amp;quot;},.</description>
    </item>
    
    <item>
      <title>Mongodb和mongoose聚合查询</title>
      <link>/blogdetail/5819b2b7c4d0a377509b8f1a/</link>
      <pubDate>Wed, 02 Nov 2016 09:32:39 +0000</pubDate>
      
      <guid>/blogdetail/5819b2b7c4d0a377509b8f1a/</guid>
      <description>mongdb查询某一字段sum值  需求说明：articles有一个字段pv记录了该文章的访问量，现在要统计所有文章访问量，类似于sql中的sum统计
 mongodb中查询
select sum(pv) from articles;db.articles.aggregate([{$group:{_id:null,pv:{$sum:&amp;quot;$pv&amp;quot;}}}]);结果：{ &amp;quot;_id&amp;quot; : null, &amp;quot;pv&amp;quot; : 2 }select sum(pv) from articles where createDate &amp;lt;= &#39;2016-10-20&#39;;db.articles.aggregate([{$match:{createDate:{$lte:&amp;quot;2016-10-20&amp;quot;}}},{$group:{_id:null,pv:{$sum:&amp;quot;$pv&amp;quot;}}}]);结果：{ &amp;quot;_id&amp;quot; : null, &amp;quot;pv&amp;quot; : 9 }select sum(pv) from articles where category = &#39;Nodejs&#39;;db.articles.aggregate([{$match:{category:&amp;quot;Nodejs&amp;quot;}},{$group:{_id:null,pv:{$sum:&amp;quot;$pv&amp;quot;}}}]);结果：{ &amp;quot;_id&amp;quot; : null, &amp;quot;pv&amp;quot; : 7 }需要注意$match和$group的顺序，反了是不行的，因为这是Aggregation Pipeline（管道流）
mongoose实现方式，与上面sql的顺序对应：
Article.aggregate({ $group: { _id: null, pvCount: { $sum: &#39;$pv&#39; }}}, function(err, doc) {console.log(&amp;quot;1&amp;quot;, doc);});Article.</description>
    </item>
    
  </channel>
</rss>
