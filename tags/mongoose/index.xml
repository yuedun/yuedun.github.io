<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mongoose on 月盾的博客</title>
    <link>/tags/mongoose/</link>
    <description>Recent content in mongoose on 月盾的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Sep 2018 09:21:31 +0000</lastBuildDate><atom:link href="/tags/mongoose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mongoose查询没有响应</title>
      <link>/blogdetail/5b90f19bb1f3aa6dab14313d/</link>
      <pubDate>Thu, 06 Sep 2018 09:21:31 +0000</pubDate>
      
      <guid>/blogdetail/5b90f19bb1f3aa6dab14313d/</guid>
      <description>使用mongoose建立了连接以后，通过model查询数据，如：testModel.find(),既不报错又不返回数据。
const mongoose = require(&#39;mongoose&#39;);mongoose.connect(&#39;mongodb://localhost/my_database&#39;);使用mongoose.connect连接产生在mongoose.connection上，使用mongoose.createConnection是反回一个连接对象，建立model的时候需要使用这个连接才有效，此时使用mongoose.model是无效的。
const conn = mongoose.createConnection(&#39;your connection string&#39;);const MyModel = conn.model(&#39;ModelName&#39;, schema);const m = new MyModel;m.save(); // 可以工作vs
const conn = mongoose.createConnection(&#39;your connection string&#39;);const MyModel = mongoose.model(&#39;ModelName&#39;, schema);const m = new MyModel;m.save(); // 不能工作</description>
    </item>
    
    <item>
      <title>open() is deprecated in mongoose &gt;= 4.11.0, use openUri()</title>
      <link>/blogdetail/5996a2dc9205bd72e7290ebb/</link>
      <pubDate>Fri, 18 Aug 2017 08:18:36 +0000</pubDate>
      
      <guid>/blogdetail/5996a2dc9205bd72e7290ebb/</guid>
      <description>`open()` is deprecated in mongoose &amp;gt;= 4.11.0, use `openUri()` instead, or set the `useMongoClient` option if using `connect()` or `createConnection()`. See http://mongoosejs.com/docs/connections.html#use-mongo-clientDb.prototype.authenticate method will no longer be available in the next major release 3.x as MongoDB 3.6 will only allow auth against users in the admin db and will no longer allow multiple credentials on a socket. Please authenticate using MongoClient.connect with auth credentials.修改连接参数：
url = `mongodb://${this.username}:${this.password}@${this.host}:${this.port}/${this.dbName}`;const opts = {// autoReconnect: false,//默认true// reconnectTries: 30,//尝试重连，默认30次// reconnectInterval: 1000, //重连间隔，默认1000毫秒loggerLevel: &amp;quot;warn&amp;quot;, //error/warn/info/debuguseMongoClient: true};mongoose.</description>
    </item>
    
    <item>
      <title>mongoose自动添加createdAt和updatedAt</title>
      <link>/blogdetail/593b6b37b787b03177cfff16/</link>
      <pubDate>Sat, 10 Jun 2017 04:44:55 +0000</pubDate>
      
      <guid>/blogdetail/593b6b37b787b03177cfff16/</guid>
      <description>export var CommentSchema: Schema = new Schema({ Id: String, content: String, status: { type: Boolean, default: true } }, { timestamps: true}); 添加{ timestamps: true}选项即可，如果需要自定义属性名称可以直接指定： { timestamps: {createdAt:&#39;created_at&#39;, updatedAt:&#39;updated_at&#39;}}</description>
    </item>
    
    <item>
      <title>Mongodb和mongoose模糊查询</title>
      <link>/blogdetail/581d736c43c18f1b7ae3e3ff/</link>
      <pubDate>Sat, 05 Nov 2016 05:51:40 +0000</pubDate>
      
      <guid>/blogdetail/581d736c43c18f1b7ae3e3ff/</guid>
      <description>需求说明：在mongdb中使用模糊查询，就像sql中的like查询，在where条件中使用模糊匹配，当然最重要的是需要模糊查询的字符串是动态传入的
 以一篇文章为例，content字段为文章内容，我们要查询文章内容中包含Nodejs关键字的文章
mongodb中查询
select * from articles where content like &#39;%Nodejs%&#39;;db.articles.find( { content: /Nodejs/i } )Article.find({ content: /Nodejs/i}, function (err, docs) {});这种写法是一种简写操作，需要注意的是不能带双引号，带了双引号就成了字符串。但是这种写法是用/包裹了一个字符串类型的关键字，在实际程序是动态传入的，比如：
var a=&amp;quot;Nodejs&amp;quot; ;Article.find({ content: /a/i}, function (err, docs) {});此时会把&amp;quot;a&amp;quot;当做要查询的关键字而不是&amp;quot;Nodejs&amp;quot;，所以这时还是需要用到完整的查询方式，就是使用$regex关键字，还有$options选项
var text = &#39;Nodejs&#39;;//动态传入的变量Article.find({ content: { $regex: text, $options: &#39;i&#39; }}, function (err, docs) {});$options选项值：
 i 大小写不敏感 m $regex包含正则^,$符号的表达式 x 忽略空格 s 允许逗点匹配所有字符串  其实$regex就是正则表达式的写法
查找数组中的字段：
contacts:{[{address: &amp;quot;address1&amp;quot;,name: &amp;quot;张三&amp;quot;},{address: &amp;quot;address2&amp;quot;,name: &amp;quot;李四&amp;quot;},.</description>
    </item>
    
    <item>
      <title>Mongodb和mongoose聚合查询</title>
      <link>/blogdetail/5819b2b7c4d0a377509b8f1a/</link>
      <pubDate>Wed, 02 Nov 2016 09:32:39 +0000</pubDate>
      
      <guid>/blogdetail/5819b2b7c4d0a377509b8f1a/</guid>
      <description>mongdb查询某一字段sum值  需求说明：articles有一个字段pv记录了该文章的访问量，现在要统计所有文章访问量，类似于sql中的sum统计
 mongodb中查询
select sum(pv) from articles;db.articles.aggregate([{$group:{_id:null,pv:{$sum:&amp;quot;$pv&amp;quot;}}}]);结果：{ &amp;quot;_id&amp;quot; : null, &amp;quot;pv&amp;quot; : 2 }select sum(pv) from articles where createDate &amp;lt;= &#39;2016-10-20&#39;;db.articles.aggregate([{$match:{createDate:{$lte:&amp;quot;2016-10-20&amp;quot;}}},{$group:{_id:null,pv:{$sum:&amp;quot;$pv&amp;quot;}}}]);结果：{ &amp;quot;_id&amp;quot; : null, &amp;quot;pv&amp;quot; : 9 }select sum(pv) from articles where category = &#39;Nodejs&#39;;db.articles.aggregate([{$match:{category:&amp;quot;Nodejs&amp;quot;}},{$group:{_id:null,pv:{$sum:&amp;quot;$pv&amp;quot;}}}]);结果：{ &amp;quot;_id&amp;quot; : null, &amp;quot;pv&amp;quot; : 7 }需要注意$match和$group的顺序，反了是不行的，因为这是Aggregation Pipeline（管道流）
mongoose实现方式，与上面sql的顺序对应：
Article.aggregate({ $group: { _id: null, pvCount: { $sum: &#39;$pv&#39; }}}, function(err, doc) {console.log(&amp;quot;1&amp;quot;, doc);});Article.</description>
    </item>
    
  </channel>
</rss>
