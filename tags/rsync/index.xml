<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rsync on 月盾的博客</title>
    <link>https://www.yuedun.wang/tags/rsync/</link>
    <description>Recent content in Rsync on 月盾的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 11 Jun 2021 14:16:17 +0800</lastBuildDate>
    <atom:link href="https://www.yuedun.wang/tags/rsync/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>typescript不检查node_moduls</title>
      <link>https://www.yuedun.wang/blogdetail/60b48e405caa4b4dc69e3abf/</link>
      <pubDate>Fri, 11 Jun 2021 14:16:17 +0800</pubDate>
      <guid>https://www.yuedun.wang/blogdetail/60b48e405caa4b4dc69e3abf/</guid>
      <description>&lt;p&gt;tsconfig.json 中 exclude node_modules，但 tsc 还是报错。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node_modules/connect-mongo/src/types.d.ts:113:66 - error TS2694: Namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;global.Express&amp;#39;&lt;/span&gt; has no exported member &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SessionData&amp;#39;&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;         get: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sid: string, callback: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err: any, session: Express.SessionData | null&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; void&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; void;                                                                     ~~~~~~~~~~~&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node_modules/connect-mongo/src/types.d.ts:114:45 - error TS2694: Namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;global.Express&amp;#39;&lt;/span&gt; has no exported member &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SessionData&amp;#39;&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;         set: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sid: string, session: Express.SessionData, callback?: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err: any&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; void&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; void;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                ~~~~~~~~~~~&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node_modules/connect-mongo/src/types.d.ts:118:47 - error TS2694: Namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;global.Express&amp;#39;&lt;/span&gt; has no exported member &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SessionData&amp;#39;&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;         touch: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sid: string, session: Express.SessionData, callback?: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err: any&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; void&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; void;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一种解决方案：&lt;/p&gt;</description>
    </item>
    <item>
      <title>朱雀发布系统支持scp（rsync）发布</title>
      <link>https://www.yuedun.wang/blogdetail/60950c9ee76f307341586548/</link>
      <pubDate>Fri, 11 Jun 2021 14:16:17 +0800</pubDate>
      <guid>https://www.yuedun.wang/blogdetail/60950c9ee76f307341586548/</guid>
      <description>&lt;p&gt;去年花了三天时间开发了一个简易版的&lt;a href=&#34;https://www.yuedun.wang/blogdetail/5f41c9d65edb9b37630b0d46&#34;&gt;nodejs发布系统&lt;/a&gt;，它是基于pm2自带的&lt;a href=&#34;https://pm2.keymetrics.io/docs/usage/deployment/&#34;&gt;deploy&lt;/a&gt;机制开发的，主要原理就是在两台装有pm2的机器直接通信，并执行相应的命令。再往简单了说就是在发布机上远程执行命令，而朱雀发布系统提供了一个图形界面而已。&lt;/p&gt;&#xA;&lt;p&gt;当时把这个系统定位为nodejs专用发布系统，因为它依赖了pm2，而pm2则是nodejs专用的进程管理工具，其他语言用不到。这个系统的上线也算是解决了我司一直以来没有合适的nodejs发布系统的空缺。&lt;/p&gt;&#xA;&lt;p&gt;经过9个月的使用，也算比较稳定。但是也存在问题，最大的问题是部署应用方面比较繁琐。&lt;/p&gt;&#xA;&lt;p&gt;基本流程如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;发布机和应用服务器设置ssh通信配置。&lt;/li&gt;&#xA;&lt;li&gt;应用服务器安装git（有自带，但是版本太旧）。&lt;/li&gt;&#xA;&lt;li&gt;配置git用户名，邮箱。&lt;/li&gt;&#xA;&lt;li&gt;生成ssh公钥。&lt;/li&gt;&#xA;&lt;li&gt;把应用服务器的公钥配置到git代码服务器上。以便能拉代码。&lt;/li&gt;&#xA;&lt;li&gt;发布机远程执行git pull来代码操作，各应用服务把代码拉取下来。&lt;/li&gt;&#xA;&lt;li&gt;执行编译打包操作。&lt;/li&gt;&#xA;&lt;li&gt;执行重启服务操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;部署一次系统还是比较麻烦的，如果应用服务器有多台，可能还要重复这样的操作多次，实在比较麻烦。&lt;/p&gt;&#xA;&lt;p&gt;使用scp同步代码的方式会比较简单一些，但是像nodejs这样的项目，node_module占了很大比重，如果每次都打包的话会拖慢同步速度，而scp又不具备排除文件夹的能力。&lt;/p&gt;&#xA;&lt;p&gt;最后找到了&lt;strong&gt;rsync&lt;/strong&gt;命令可以满足需求。然后就是基于rsync实现了一版。不用再依赖pm2，应用服务器也不用强制使用git了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://hopefully-img.yuedun.wang/zhuque1.jpg&#34; alt=&#34;朱雀发布系统&#34; title=&#34;朱雀发布系统&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;朱雀和jenkins对比如何&#34;&gt;朱雀和Jenkins对比如何？&lt;/h3&gt;&#xA;&lt;p&gt;要说Jenkins那绝对是持续集成领域的老大哥，自然是功能强大。但是每个团队和产品有其特殊性，Jenkins并不完全适用。而朱雀也有其优势。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;朱雀本身部署简单，使用go开发，不依赖运行时，无需安装，开箱即用。&lt;/li&gt;&#xA;&lt;li&gt;目前支持和测试过的数据库有sqlite3（目前用的，不需要繁琐的安装过程）和mysql。&lt;/li&gt;&#xA;&lt;li&gt;配置简单。&lt;/li&gt;&#xA;&lt;li&gt;部署发布一键完成，不需要单独的部署过程。&lt;/li&gt;&#xA;&lt;li&gt;并行发布。&lt;/li&gt;&#xA;&lt;li&gt;审批，通知，权限。&lt;/li&gt;&#xA;&lt;li&gt;开源，可定制开发。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/yuedun/zhuque&#34;&gt;朱雀发布系统&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
