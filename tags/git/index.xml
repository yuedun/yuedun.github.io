<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 月盾的博客</title>
    <link>https://www.yuedun.wang/tags/git/</link>
    <description>Recent content in git on 月盾的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 May 2023 18:55:23 +0800</lastBuildDate><atom:link href="https://www.yuedun.wang/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jenkins代替品</title>
      <link>https://www.yuedun.wang/2023/05/ci-cd/</link>
      <pubDate>Wed, 10 May 2023 18:55:23 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2023/05/ci-cd/</guid>
      <description>如果你打算搭建一套发布系统，你可能会考虑jenkins，或者其他。 我要介绍的则是一些现成的，使用更简单的工具。没用特殊环境要求的情况下则完全可以代替jenkins。
GitHub Actions 阿里云流水线 coding持续部署 上面只是列举了三类，实际上你会发现市面上的云服务商和代码仓库都提供了类似的工具，虽然有些是收费的，但是也有不少免费的，对于个人来说其实大多数都是够用了。</description>
    </item>
    
    <item>
      <title>gitpage Hugo统计每一篇文章浏览量</title>
      <link>https://www.yuedun.wang/2021/06/gitpage-hugo-page-view/</link>
      <pubDate>Fri, 18 Jun 2021 20:03:41 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2021/06/gitpage-hugo-page-view/</guid>
      <description>接上篇《博客迁移至hugo gitpage》后，因为缺失了每一篇文章的浏览量，而hugo又不具备这样的功能，原因还是gitpage不具备数据存储能力，自然就没办法统计每一篇文章的浏览量了。原本想使用自己服务器提供一个接口来记录，但发现https协议不支持调用http协议的接口，会出现block:mixed-content错误。
错误：https页面去发送http请求报错(浏览器阻止https发送http请求)
问题是明确了，但是我也没办法提供https的接口，免费的证书也用在了www.yuedun.wang上了。
后来想到了leancloud，直接在前端调用api，将数据存储在云端。
&amp;lt;script src=&amp;#34;//cdn.jsdelivr.net/npm/leancloud-storage@4.11.1/dist/av-min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // https://leancloud.cn/docs/sdk_setup-js.html#hash14962003 // https://leancloud.cn/docs/leanstorage_guide-js.html#hash813593086 const appId = &amp;#34;xxx&amp;#34;; const appKey = &amp;#34;xxx&amp;#34;; const serverURL = &amp;#34;xxx&amp;#34;; AV.init({ appId, appKey, serverURL }); function updateCollect() { const collect = new AV.Query(&amp;#39;Collect&amp;#39;); const url = location.pathname; collect.select([&amp;#39;url&amp;#39;, &amp;#39;pv&amp;#39;]) collect.equalTo(&amp;#39;url&amp;#39;, url); collect.first().then((col) =&amp;gt; { if (!col) { // 声明 class const Collect = AV.Object.extend(&amp;#39;Collect&amp;#39;); // 构建对象 const collect = new Collect(); // 为属性赋值 collect.set(&amp;#39;url&amp;#39;, url); collect.set(&amp;#39;pv&amp;#39;, 1); collect.</description>
    </item>
    
    <item>
      <title>博客迁移至hugo gitpage</title>
      <link>https://www.yuedun.wang/2021/06/blog-move-to-gitpage/</link>
      <pubDate>Thu, 17 Jun 2021 19:38:31 +0800</pubDate>
      
      <guid>https://www.yuedun.wang/2021/06/blog-move-to-gitpage/</guid>
      <description>为什么迁移？ 6月初的时候，3年前买的阿里云服务器到期了，又买了其他服务器，但是只有1年期，于是进行了一番数据，应用迁移，这么一顿操作下来还是挺累的，尤其是在linux上安装mysql，mongodb，安装后又是连接不上，用了好几天时间才搞定，挺烦的。
再想到一年后又是一顿操作，不由得一个激灵。
经过一番的思量后，决定将自建博客迁移至gitpage上。
自建和gitpage优劣对比 首先列出自己博客具备的功能：
首页 包含最近10篇文章的标题和部分内容，最近发表的5篇，分类，标签，友链 目录 所有文章时间线 留言 自维护留言系统 微博 新浪微博，最近出问题不显示了 速记 简单记录 关于 自我介绍 整体比较简单，没什么复杂功能。而很多静态博客也具备这些功能，而且做的更好，所以基本不会有主要功能的缺失。所以迁移到gitpage上也不会有什么问题。
劣势 静态博客在一些细节功能上面确实会有缺失，比如：
评论功能，数据原来是存在自己服务器上的，gitpage不具备数据存储能力，所以需要对接第三方评论或留言功能。 目录缺失，这点主要由博客主题决定，有些主题是没有目录功能的。 PV/UV统计，同样是由于数据存储的缺失，所以gitpage也没有这样的统计功能，但是可以添加谷歌，百度统计之类的。 自定义功能较弱，只能使用主题提供的页面模式，除非不使用静态博客工具，完全自己开发。 不能在线编辑。 优势 免费，没有服务器费用。 可以自定义域名，只需要一丁点儿的域名费用。 seo良好。 规范的书写格式，使文章内容更统一美观。 更强大的编辑器，可以选择自己喜欢的markdown编辑器。 便于本地检索。 数据更保险，不易丢失。 安全，静态博客可以避免一些网络攻击。 整体来说，除了数据存储功能缺失外，其他都是可以实现的。
迁移过程 将mongodb数据中的博客导出为本地markdown文件。
// mongodb数据转markdown function genMd() { return Blog.find({ status: 1 }, null, { sort: { &amp;#39;_id&amp;#39;: -1 } }) .then(data =&amp;gt; { data.forEach((b) =&amp;gt; { debug(b) let tags = b.tags.split(&amp;#34;,&amp;#34;) let blog = `--- title: &amp;#34;${b.</description>
    </item>
    
    <item>
      <title>windows好用的bash工具——ConEmu</title>
      <link>https://www.yuedun.wang/blogdetail/598aaf0525207f400eeb1b87/</link>
      <pubDate>Wed, 09 Aug 2017 06:43:17 +0000</pubDate>
      
      <guid>https://www.yuedun.wang/blogdetail/598aaf0525207f400eeb1b87/</guid>
      <description>其实git-bash-for-windows这个git bash工具已经很好用了，不过对于平时需要开3-5的bash窗口的我来说就比较烦了，一直要不停的切换窗口，所以想找一款像linux terminal一样可以多开的工具，幸好有这样的工具，那就是ConEmu。
使用前需要一些配置，不配置也没关系，就是使用起来不方便，我是按照的习惯完全配置成了git bash的使用方式。
第一步: 第二步： 配置本地git bash地址（此步骤可适当配置 第三步： 设置ConEmu启动即打开bash而非windows cmd 第四步： 如果前面都没问题，可以设置自动保存打开的窗口，以便下次打开即可使用 最后： 根据个人喜好修改字体等 这样就可以完美使用git bash，不论是自动补全还是颜色主题都和git bash无异。
另外cmder其实也是我使用过的一个不错的工具，同时推荐试用。</description>
    </item>
    
    <item>
      <title>TortoiseGit提交到远程仓库时git did not exit cleanly (exit code 128)</title>
      <link>https://www.yuedun.wang/blogdetail/564554fec888d8070f145c36/</link>
      <pubDate>Fri, 13 Nov 2015 03:11:58 +0000</pubDate>
      
      <guid>https://www.yuedun.wang/blogdetail/564554fec888d8070f145c36/</guid>
      <description>虽然出现git did not exit cleanly (exit code 128)的情况各有不同，不过其中一种是提交时的读写权限有问题，如果本地代码连接的是SSH仓库，那么可能是服务端没有配置SSH Key。github有两个地方配置sshkey，有一个是全局的，另一个是针对单个仓库的，如果给某个仓库配置了Deploy keys（其实和SSHkey一样），提交另一个代码时就会出现git did not exit cleanly。对于我这种不熟练的人来说就想着再添加一个Deploy keys，但是又提示Key already in use，这时就要看看是不是其他仓库单独配置了ssh key。如果仓库太多具体哪个配置了也不太清楚，有个简单快读的办法是在命令行执行 ssh -T -ai .\id_rsa git@github.com，会告诉你哪个仓库在使用本地的id_rsa内容。删掉Deploy keys，配置为全局SSH Keys就行了</description>
    </item>
    
    <item>
      <title>Git SSH Key在windows下生成过程</title>
      <link>https://www.yuedun.wang/blogdetail/56400429c888d8070f145c35/</link>
      <pubDate>Mon, 09 Nov 2015 02:25:45 +0000</pubDate>
      
      <guid>https://www.yuedun.wang/blogdetail/56400429c888d8070f145c35/</guid>
      <description>切换到C:\Users\\.ssh
执行命令：ssh-keygen -t rsa -C &amp;ldquo;邮箱地址&amp;rdquo;
Generating public/private rsa key pair.
Enter file in which to save the key (//.ssh/id_rsa):
第一次生成由于没有id_rsa文件和id_rsa.pub文件，所以需要生成这两个文件，然后手动输入：./id_rsa
Enter file in which to save the key (//.ssh/id_rsa): ./id_rsa，虽然要求输入//.ssh/id_rsa，但这种方式不是在当前目录下
接下来两部是要求输入密码，不输入直接回车就完成了。
PS C:\Users\admin\.ssh&amp;gt; ssh-keygen -t rsa -C &amp;#34;myemail@163.com&amp;#34; Generating public/private rsa key pair. Enter file in which to save the key (//.ssh/id_rsa): ./id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in .</description>
    </item>
    
    <item>
      <title>git常用命令</title>
      <link>https://www.yuedun.wang/blogdetail/54486c117b1470fa64bb911a/</link>
      <pubDate>Thu, 23 Oct 2014 02:46:41 +0000</pubDate>
      
      <guid>https://www.yuedun.wang/blogdetail/54486c117b1470fa64bb911a/</guid>
      <description>查看、添加、提交、删除、找回，重置修改文件
git help # 显示command的help
git show # 显示某次提交的内容 git show $id
git co &amp;ndash; # 抛弃工作区修改
git co . # 抛弃工作区修改
git add # 将工作文件修改提交到本地暂存区
git add . # 将所有修改过的工作文件提交暂存区
git rm # 从版本库中删除文件
git rm &amp;ndash;cached # 从版本库中删除文件，但不删除文件
git reset # 从暂存区恢复到工作文件
git reset &amp;ndash; . # 从暂存区恢复到工作文件
git reset &amp;ndash;hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　git ci -am &amp;ldquo;some comments&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>
